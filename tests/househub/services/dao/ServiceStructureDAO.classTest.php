<?php

namespace househub\services\dao;


while (!file_exists(getcwd() . DIRECTORY_SEPARATOR . ".htroot")) {
    chdir('..');
}
$d = DIRECTORY_SEPARATOR;
require_once getcwd() . $d . 'tests' . $d .'househub' . $d .'access' . $d .'strategies' 
            . $d .'ObjectMakerHelper.class.php';

use househub\access\DatabaseConnector;
use househub\services\tables\ServiceStructureTable;
use lightninghowl\utils\sql\SqlCriteria;
use PDO;
use tests\househub\access\strategies\ObjectMakerHelper;


/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-12-05 at 08:28:00.
 */
class ServiceStructureDAOTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var ServiceStructureDAO
     */
    protected $object;

     /** @var PDO
     */
    protected $pdo;
    protected $services;
    
    protected function setUp() {
        $this->pdo = DatabaseConnector::getDriver();
        $this->pdo->beginTransaction();
        
        $this->object = new ServiceStructureDAO($this->pdo);
        $this->services = ObjectMakerHelper::makeServices();
    }
    
    protected function tearDown() {
        $this->pdo->rollBack();
    }

    
    /**
     *  househub\services\dao\ServiceStructureDAO::load
     * @todo   Implement testLoad().
     */
    public function testLoad() {
        $response = $this->object->load('');
        $this->assertNull($response);
    }

    /**
     *  househub\services\dao\ServiceStructureDAO::listAll
     * @todo   Implement testListAll().
     */
    public function testListAll() {
        $serviceId = $this->object->insert($this->services[0]);
        $this->services[0]->setId($serviceId);
        
        $criteria = new SqlCriteria();
        $criteria->setBlockStatus(ServiceStructureTable::COLUMN_ID, $serviceId);
        $loadedServices = $this->object->listAll($criteria);
        
        $this->assertEquals(array($this->services[0]), $loadedServices);
    }

    /**
     *  househub\services\dao\ServiceStructureDAO::insert
     * @todo   Implement testInsert().
     */
    public function testInsert() {
        $serviceId = $this->object->insert($this->services[0]);
        $this->services[0]->setId($serviceId);
        
        $loadedService = $this->object->load($serviceId);
        $this->assertEquals($this->services[0], $loadedService);
    }

    /**
     *  househub\services\dao\ServiceStructureDAO::update
     * @todo   Implement testUpdate().
     */
    public function testUpdate() {
        $service = $this->services[0];
        $serviceId = $this->object->insert($service);
        $this->services[0]->setId($serviceId);
        
        $service->setName("novoNome");
        $this->object->update($service);
        $loadedService = $this->object->load($serviceId);
        $this->assertEquals("novoNome", $loadedService->getName());
    }

    /**
     *  househub\services\dao\ServiceStructureDAO::delete
     * @todo   Implement testDelete().
     */
    public function testDelete() {
        $service = $this->services[0];
        $serviceId = $this->object->insert($service);
        $service->setId($serviceId);
        
        $this->object->delete($service);
        
        $loadedServices = $this->object->listAll(new SqlCriteria());
        $this->assertCount(0, $loadedServices);
    }

}
