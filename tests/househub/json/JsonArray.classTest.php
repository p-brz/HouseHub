<?php

namespace househub\json;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-12-03 at 13:00:35.
 */
class JsonArrayTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var JsonArray
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new JsonArray("array");
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     *  househub\json\JsonArray::getElements
     * @todo   Implement testGetElements().
     */
    public function testGetElements() {
        $this->assertEmpty($this->object->getElements());
    }

    /**
     *  househub\json\JsonArray::addElement
     * @test
     */
    public function testAddElement() {
        $newElement = new JsonData("algo", "algumValor");
        $this->object->addElement($newElement);
        $this->assertEquals($newElement, $this->object->getElement(0));
        
        return $this->object;
    }

    /**
     *  househub\json\JsonArray::setElement
     * @test
     */
    public function testSetElement() {
        $this->object->addElement( new JsonData("algo", "algumValor"));
        $otherElement = new JsonData("algo", "algumValor");
        $this->object->setElement(0,$otherElement);
        $this->assertEquals($otherElement, $this->object->getElement(0));
    }

    /**
     *  househub\json\JsonArray::removeElement
     */
    public function testRemoveElement() {
        $newElement = new JsonData("algo", "algumValor");
        $this->object->addElement($newElement);
        $this->assertContains($newElement, $this->object->getElements());
        $this->object->removeElement($this->object->getElement(0));
//        var_dump($this->object->getElements());
        $this->assertEmpty($this->object->getElements());
    }
    /**
     *  househub\json\JsonArray::removeElement
     */
    public function testRemoveInexistentElement() {
        $newElement = new JsonData("algo", "algumValor");
        $this->object->addElement($newElement);
        $this->object->removeElement(new JsonData("inexistentElement"));
        $this->assertEquals(array($newElement), $this->object->getElements());
    }

    /**
     *  househub\json\JsonArray::valueToString
     */
    public function testValueToStringJsonData() {
        $this->object->addElement(new JsonData("elemento1", "valor1"));
        $this->object->addElement(new JsonData("elemento2", "valor2"));
        
        $expected = json_encode(array("valor1","valor2"));
                
        $this->assertJsonStringEqualsJsonString($expected, $this->object->valueToString());
    }
    /**
     *  househub\json\JsonArray::valueToString
     */
    public function testToString() {
        $this->object->setName("content");
        $this->object->addElement(new JsonData("elemento1", "valor1"));
        $this->object->addElement(new JsonData("elemento2", "valor2"));
        
        $expected = json_encode(array("content" => array("valor1","valor2")));
                echo $expected;
                echo "{" . $this->object->toString()."}";
        $this->assertJsonStringEqualsJsonString($expected, "{" . $this->object->toString()."}");
    }
    /**
     *  househub\json\JsonArray::valueToString
     * @todo   Implement testValueToString().
     */
    public function testValueToStringValue() {
        $this->object->addElement("valor1");
        $this->object->addElement("valor2");
        
        $expected = json_encode(array("valor1","valor2"));
                
        $this->assertJsonStringEqualsJsonString($expected, $this->object->valueToString());
    }
    /**
     *  househub\json\JsonArray::valueToString
     * @todo   Implement testValueToString().
     */
    public function testValueToStringValueArray() {
        $this->object->addElement("valor1");
        $this->object->addElement("valor2");
        $this->object->addElement(array(1,2,3));
        
        $expected = json_encode(array("valor1","valor2", array(1,2,3)));
                
        $this->assertJsonStringEqualsJsonString($expected, $this->object->valueToString());
    }

}
