<?php

namespace househub\objects\home;

use househub\conditions\ObjectCondition;
use househub\objects\dao\ObjectStructureDAO;
use househub\objects\ObjectStructure;
use househub\objects\ObjectVisualName;
use househub\scheme\Scheme;
use househub\services\dao\ServiceStructureDAO;
use househub\services\ServiceStructure;
use househub\status\dao\StatusStructureDAO;
use househub\status\StatusStructure;
use lightninghowl\database\arguments\MySQLArgument;
use lightninghowl\database\DbDriver;
use PDO;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-12-03 at 17:23:12.
 */
class HomeObjectManagerTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var HomeObjectManager
     */
    protected $object;

    /**
     * @var PDO
     */
    protected $pdo;
    
    
    protected static $statement;
    
    public static function setUpBeforeClass()
    {
        while (!file_exists(getcwd() . DIRECTORY_SEPARATOR . ".htroot")) {
            chdir('..');
        }

        self::$statement = file_get_contents(getcwd() . DIRECTORY_SEPARATOR . 'files' . DIRECTORY_SEPARATOR . 'test' . DIRECTORY_SEPARATOR . 'househubtest.sql');
        
        
    }
    
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new HomeObjectManager();
        
        $argument = new MySQLArgument();

        $argument->setHost($GLOBALS["DB_HOST"] );
        $argument->setPort($GLOBALS["DB_PORT"]);
        $argument->setDbName($GLOBALS["DB_NAME"]);
        $argument->setDbUser($GLOBALS["DB_USER"]);
        $argument->setDbPass($GLOBALS["DB_PASS"]);

        $this->pdo = DbDriver::open($argument);
//        $this->pdo = DatabaseConnector::getDriver();
            
        $this->pdo->beginTransaction();
        
//        $this->pdo->query($statement);
        $this->pdo->exec(self::$statement);
    }

    protected function tearDown() {

        $this->pdo->rollBack();
    }

    /**
     *  househub\objects\home\HomeObjectManager::saveObject
     */
    public function testSaveObject() {
        $homeObject = $this->makeObject();
        $savedObject = $this->object->saveObject($homeObject, $this->pdo);
        $this->assertTrue($savedObject instanceof HomeObject);
    }

    /**
     *  househub\objects\home\HomeObjectManager::loadObject
     * @todo   Implement testLoadObject().
     */
    public function testLoadObject() {
        $object = $this->object->loadObject(0, 0, $this->pdo);
        $this->assertNull($object->getStructure());
        $this->assertNull($object->getScheme());
        $this->assertEquals(array(), $object->getServices());
        $this->assertEquals(array(), $object->getStatus());
        $subObjects = $object->getSubObjects();
        if (!empty($subObjects)) {
            foreach ($subObjects as $subObject) {
                $this->assertTrue($subObject instanceof HomeObject);
            }
        }
        $this->assertEquals(array(), $object->getValidConditions());
        $this->assertNull($object->getVisualName());
        $this->assertNull($object->getVisualName());
    }

    public function testLoadObjectB() {
//        while (!file_exists(getcwd() . DIRECTORY_SEPARATOR . ".htroot")) {
//            chdir('..');
//        }
//
//        $statement = file_get_contents(getcwd() . DIRECTORY_SEPARATOR . 'files' . DIRECTORY_SEPARATOR . 'test' . DIRECTORY_SEPARATOR . 'househubtest.sql');
//        
//        $this->pdo->query($statement);
        $object = $this->object->loadObject(2, 0, $this->pdo);
        
        $this->assertTrue($object->getStructure() instanceof ObjectStructure);
        $this->assertTrue($object->getScheme() instanceof Scheme);

        $services = $object->getServices();
        if (!empty($services)) {
            foreach ($services as $service) {
                $this->assertTrue($service instanceof ServiceStructure);
            }
        }

        $statuses = $object->getStatus();
        if (!empty($statuses)) {
            foreach ($statuses as $status) {
                $this->assertTrue($status instanceof StatusStructure);
            }
        }

        $subObjects = $object->getSubObjects();
        if (!empty($subObjects)) {
            foreach ($subObjects as $subObject) {
                $this->assertTrue($subObject instanceof HomeObject);
            }
        }

        $conditions = $object->getValidConditions();
        if (!empty($conditions)) {
            foreach ($conditions as $condition) {
                $this->assertTrue($condition instanceof ObjectCondition);
            }
        }
        $this->assertTrue($object->getVisualName() instanceof ObjectVisualName);
    }

    /**
     *  househub\objects\home\HomeObjectManaobjectger::loadStructure
     */
    public function testLoadStructure() {
        $structure = $this->makeStructure();
        $savedStructure = $this->object->saveObjectStructure($structure, $this->pdo);
        $loadedStructure = $this->object->loadStructure($savedStructure->getId(), $this->pdo);

        $this->assertNotNull($loadedStructure);
        $this->assertEquals($savedStructure, $loadedStructure);
    }

    /**
     *  househub\objects\home\HomeObjectManaobjectger::loadStructure
     */
    public function testLoadStructureFail() {
        $loadedStructure = $this->object->loadStructure(null, $this->pdo);

        $this->assertNull($loadedStructure);
    }

    public function testLoadVisualName() {
        $visual = $this->object->loadVisualName(0, 1, $this->pdo);
        $this->assertNull($visual);
    }

    public function testLoadVisualNameFail() {
        $visual = $this->object->loadVisualName('a', 'b', $this->pdo);
        $this->assertNull($visual);
    }

    /**
     *  househub\objects\home\HomeObjectManager::saveServices
     * @todo   Implement testLoadServices().
     */
    public function testSaveServices() {
        $structure = $this->makeStructure();

        $structureDAO = new ObjectStructureDAO($this->pdo);
        $structureId = $structureDAO->insert($structure);

        $services = $this->makeServices($structureId);

        $savedServices = $this->object->saveServices($structureId, $services, $this->pdo);

        $servicesDAO = new ServiceStructureDAO($this->pdo);
        $loadedServices = array();
        foreach ($savedServices as $service) {
            $loadedServices[] = $servicesDAO->load($service->getId());
        }

        $this->assertEquals($loadedServices, $savedServices);

        return array($structureId, $loadedServices);
    }

    public function testSaveSubObjects(){
        $homeobj = $this->object->loadObject(1, 0, $this->pdo);
        $objs = $this->object->saveSubobjects(1, $homeobj->getSubObjects(), $this->pdo);
        foreach($objs as $obj){
            $this->assertTrue($obj instanceof HomeObject);
        }
    }
    
    /**
     *  househub\objects\home\HomeObjectManager::loadServices
     * @depends testSaveServices
     */
    public function testLoadServices($data) {
//        while (!file_exists(getcwd() . DIRECTORY_SEPARATOR . ".htroot")) {
//            chdir('..');
//        }
//
//        $statement = file_get_contents(getcwd() . DIRECTORY_SEPARATOR . 'files' . DIRECTORY_SEPARATOR . 'test' . DIRECTORY_SEPARATOR . 'househubtest.sql');
//        $this->pdo->query($statement);
       
        $loadedServices = $this->object->loadServices(2, $this->pdo);
        foreach($loadedServices as $loadedService){
            $this->assertTrue($loadedService instanceof ServiceStructure);
        }

    }

    /**
     *  househub\objects\home\HomeObjectManager::loadStatus
     */
    public function testSaveStatus() {
        $structure = $this->makeStructure();

        $structureDAO = new ObjectStructureDAO($this->pdo);
        $structureId = $structureDAO->insert($structure);

        $services = $this->makeStatus($structureId);

        $savedStatus = $this->object->saveStatus($structureId, $services, $this->pdo);

        $statusDAO = new StatusStructureDAO($this->pdo);
        $loadedStatus = array();
        foreach ($savedStatus as $status) {
            $loadedStatus[] = $statusDAO->load($status->getId());
        }

        $this->assertEquals($loadedStatus, $savedStatus);

        return array($structureId, $loadedStatus);
    }

    /**
     *  househub\objects\home\HomeObjectManager::loadStatus
     * @depends testSaveStatus
     */
    public function testLoadStatus($data) {
//        while (!file_exists(getcwd() . DIRECTORY_SEPARATOR . ".htroot")) {
//            chdir('..');
//        }
//
//        $statement = file_get_contents(getcwd() . DIRECTORY_SEPARATOR . 'files' . DIRECTORY_SEPARATOR . 'test' . DIRECTORY_SEPARATOR . 'househubtest.sql');
//        $this->pdo->query($statement);
        
        $loadedStatuses = $this->object->loadStatus(2, $this->pdo);
        foreach($loadedStatuses as $loadedStatus){
            $this->assertTrue($loadedStatus instanceof StatusStructure);
        }
    }

    protected function makeStatus() {
//        {
//            "name" : "aberta",
//            "path" : "/status/aberta",
//            "type" : "boolean",
//            "readOnly" : true
//        },
//        {
//            "name" : "travada",
//            "path" : "/status/travada",
//            "type" : "boolean",
//            "readOnly" : true
//        }
        $statusAberta = new StatusStructure("aberta", 0);
        $statusFechada = new StatusStructure("fechada", 0);
        return array($statusAberta, $statusFechada);
    }

    /**
     *  househub\objects\home\HomeObjectManager::loadSubObjects
     * @todo   Implement testLoadSubObjects().
     */
    public function testLoadSubObjects() {
//        while (!file_exists(getcwd() . DIRECTORY_SEPARATOR . ".htroot")) {
//            chdir('..');
//        }
//
//        $statement = file_get_contents(getcwd() . DIRECTORY_SEPARATOR . 'files' . DIRECTORY_SEPARATOR . 'test' . DIRECTORY_SEPARATOR . 'househubtest.sql');
//        $this->pdo->query($statement);
        
        $subObjs = $this->object->loadSubObjects(2, 0, $this->pdo);
        foreach($subObjs as $subObj){
            $this->assertTrue($subObj instanceof HomeObject);
        }
    }

    /**
     *  househub\objects\home\HomeObjectManager::loadScheme
     * @todo   Implement testLoadScheme().
     */
    public function testLoadScheme() {
        $structure = $this->makeStructure();
        $structure->setSchemeName("basicDoor");
        $scheme = $this->object->loadScheme($structure);

        $this->assertNotNull($scheme);
        $this->assertEquals("basicDoor", $scheme->getSchemeName());
    }

    /**
     * @return HomeObject
     */
    private function makeObject() {
        $homeObject = new HomeObject();
        $structure = new ObjectStructure();
        $structure->setAddress("http://192.168.0.1");
        $structure->setSchemeName("basicDoor");
        $structure->setConnected(false);
        $structure->setType("door");

        $homeObject->setStructure($structure);


        return $homeObject;
    }

    /**
     * @return ObjectStructure
     */
    private function makeStructure() {
        $structure = new ObjectStructure();
        $structure->setAddress("http://192.168.0.100");
        $structure->setSchemeName("basicDoor");
        $structure->setConnected(false);
        $structure->setType("door");

        return $structure;
    }

    /**

      {
      "name"  : "travar",
      "path"  : "/services/travar",
      "returnType" : "boolean",
      "text"  : "@travar",
      "undoService" : "destravar",
      "parameters" : []
      },,
      {
      "name"  : "destravar",
      "path"  : "/services/destravar",
      "returnType" : "boolean",
      "text"  : "@destravar",
      "undoService" : "travar",
      "parameters" : []
      }
     *      */

    /**
     * @return ObjectStructure
     */
    private function makeServices($objId = 1) {
        $service1 = new ServiceStructure();
        $service1->setName("travar");
        $service1->setObjectId($objId);

        $service2 = new ServiceStructure();
        $service2->setName("destravar");
        $service2->setObjectId($objId);

        return array($service1, $service2);
    }

}
