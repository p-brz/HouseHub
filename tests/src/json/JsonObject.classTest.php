<?php

namespace househub\json;

use househub\json\JsonObject;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-12-01 at 23:15:14.
 */
class JsonObjectTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var JsonObject
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new JsonObject();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     */
    public function testGetElementsEmpty() {
        $elements = $this->object->getElements();
        $this->AssertTrue(empty($elements));
//        var_dump(empty($elements));
    }
    /**
     */
    public function testGetElements() {
        $expected = array(
            new JsonData("propriedade", "valor"),
            new JsonData("outroElemento", "outroValor"),
            new JsonObject("outroObjeto")
        );
        $this->object->addElement($expected[0]);
        $this->object->addElement($expected[1]);
        $this->object->addElement($expected[2]);
        $this->assertEquals($expected, $this->object->getElements());
    }

    /**
     *  househub\json\JsonObject::getElement
     */
    public function testGetElement() {
        $values = array(
            new JsonData("propriedade", "valor"),
            new JsonData("outroElemento", "outroValor"),
            new JsonObject("outroObjeto")
        );
        $this->object->addElement($values[0]);
        $this->object->addElement($values[1]);
        
        $expected = new JsonData("expected", true);
        $this->object->addElement($expected);
        
        $this->object->addElement($values[2]);
        
        $this->assertEquals($expected, $this->object->getElement(2));
        $this->assertEquals($expected, $this->object->getElement("expected"));
    }

    /**
     * househub\json\JsonObject::setElement
     */
    public function testSetElement() {
        $this->object->addElement(new JsonData());
        $expected = new JsonData("expected","value");
        $this->object->setElement(0, $expected);
        $this->assertEquals($expected, $this->object->getElement(0));
    }

    /**
     * househub\json\JsonObject::addElement
     */
    public function testAddElement() {
        $this->object->addElement(new JsonData());
        $expected = new JsonData("expected","value");
        $this->object->addElement($expected);
        $this->assertEquals($expected, $this->object->getElement(1));
    }

    /**
     * househub\json\JsonObject::removeElement
     */
    public function testRemoveElement() {
        $expected = new JsonData("expected","value");
        $this->object->addElement($expected);
        $this->object->addElement(new JsonData());
        $this->object->removeElement($expected);
        
        $this->assertFalse(in_array($expected, $this->object->getElements()));
    }
    /**
     * househub\json\JsonObject::removeElement
     */
    public function testRemoveElementFalse() {
        $expected = new JsonData("expected","value");
//        $this->object->addElement($expected);
        $this->object->addElement(new JsonData());
        $this->object->removeElement($expected);
        
        $this->assertFalse(in_array($expected, $this->object->getElements()));
    }

    /**
     * househub\json\JsonObject::valueToString
     */
    public function testValueToString() {
        $this->object->addElement(new JsonData("propriedade", "valor"));
        $this->object->addElement(new JsonData("outroElemento", "outroValor"));
        
        $expected = array("propriedade" => "valor", "outroElemento" => "outroValor");
        
        $this->assertJsonStringEqualsJsonString(json_encode($expected),$this->object->valueToString());
    }

    /**
     * househub\json\JsonObject::toString
     */
    public function testToString() {
        $this->object->setName("objName");
        $this->object->addElement(new JsonData("propriedade", "valor"));
        $this->object->addElement(new JsonData("outroElemento", "outroValor"));
        
        $expectedJson = array("objName" => array("propriedade" => "valor", "outroElemento" => "outroValor"));
        $expected = json_encode($expectedJson);
        
        $this->assertJsonStringEqualsJsonString($expected, "{" . $this->object->toString() . "}");
    }

}
